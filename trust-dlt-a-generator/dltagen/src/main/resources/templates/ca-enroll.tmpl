#!/bin/bash

echo "Enrolling the CA admin"

#input:
	# FABRIC_CA_CLIENT_HOME
	# PEM_FILE
	# PEER_HOME
	# organization:
		# name
		# peer:
			# name
			# password
		# user:
			# name
			# password
		# admin:
			# name
			# password
		# certificateAuthority:
			# name
			# adminName
			# adminPassword
			# host
			# port

export FABRIC_CA_CLIENT_HOME=${FABRIC_CA_CLIENT_HOME}
mkdir -p ${FABRIC_CA_CLIENT_HOME}

set -x
fabric-ca-client enroll -u https://${organization.certificateAuthority.adminName}:${organization.certificateAuthority.adminPassword}@${organization.certificateAuthority.host}:${organization.certificateAuthority.port} --caname ${organization.certificateAuthority.name} --tls.certfiles ${PEM_FILE}
{ set +x; } 2>/dev/null

echo "NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/${organization.certificateAuthority.host}-${organization.certificateAuthority.port}-${organization.certificateAuthority.name}.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/${organization.certificateAuthority.host}-${organization.certificateAuthority.port}-${organization.certificateAuthority.name}.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/${organization.certificateAuthority.host}-${organization.certificateAuthority.port}-${organization.certificateAuthority.name}.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/${organization.certificateAuthority.host}-${organization.certificateAuthority.port}-${organization.certificateAuthority.name}.pem
    OrganizationalUnitIdentifier: orderer" > "${FABRIC_CA_CLIENT_HOME}/msp/config.yaml"

# Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

# Copy org1's CA cert to org1's /msp/tlscacerts directory (for use in the channel MSP definition)
mkdir -p "${FABRIC_CA_CLIENT_HOME}/msp/tlscacerts"
cp ${PEM_FILE} "${FABRIC_CA_CLIENT_HOME}/msp/tlscacerts/ca.crt"

# Copy org1's CA cert to org1's /tlsca directory (for use by clients)
mkdir -p "${FABRIC_CA_CLIENT_HOME}/tlsca"
cp ${PEM_FILE} "${FABRIC_CA_CLIENT_HOME}/tlsca/tlsca.${organization.name}-cert.pem"

# Copy org1's CA cert to org1's /ca directory (for use by clients)
mkdir -p "${FABRIC_CA_CLIENT_HOME}/ca"
cp ${PEM_FILE} "${FABRIC_CA_CLIENT_HOME}/ca/ca.${organization.name}-cert.pem"

echo "Registering peer0"
set -x
fabric-ca-client register --caname ${organization.certificateAuthority.name} --id.name ${organization.peer.name} --id.secret ${organization.peer.password} --id.type peer --tls.certfiles ${PEM_FILE}
{ set +x; } 2>/dev/null

echo "Registering user"
set -x
fabric-ca-client register --caname ${organization.certificateAuthority.name} --id.name ${organization.user.name} --id.secret ${organization.user.password} --id.type client --tls.certfiles ${PEM_FILE}
{ set +x; } 2>/dev/null

echo "Registering the org admin"
set -x
fabric-ca-client register --caname ${organization.certificateAuthority.name} --id.name ${organization.admin.name} --id.secret ${organization.admin.password} --id.type admin --tls.certfiles ${PEM_FILE}
{ set +x; } 2>/dev/null

echo "Generating the peer0 msp"
set -x
fabric-ca-client enroll -u https://${organization.peer.name}:${organization.peer.password}@${organization.certificateAuthority.host}:${organization.certificateAuthority.port} --caname ${organization.certificateAuthority.name} -M "${PEER_HOME}/msp" --csr.hosts "${organization.peer.name}.${organization.name}" --tls.certfiles ${PEM_FILE}
{ set +x; } 2>/dev/null

cp "${FABRIC_CA_CLIENT_HOME}/msp/config.yaml" "${PEER_HOME}/msp/config.yaml"

echo "Generating the peer0-tls certificates"
set -x
fabric-ca-client enroll -u https://${organization.peer.name}:${organization.peer.password}@${organization.certificateAuthority.host}:${organization.certificateAuthority.port} --caname ${organization.certificateAuthority.name} -M "${PEER_HOME}/tls" --enrollment.profile tls --csr.hosts "${organization.peer.name}.${organization.name}" --csr.hosts ${organization.certificateAuthority.host} --tls.certfiles ${PEM_FILE}
{ set +x; } 2>/dev/null

# Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
cp "${PEER_HOME}/tls/tlscacerts/"* "${PEER_HOME}/tls/ca.crt"
cp "${PEER_HOME}/tls/signcerts/"* "${PEER_HOME}/tls/server.crt"
cp "${PEER_HOME}/tls/keystore/"* "${PEER_HOME}/tls/server.key"

echo "Generating the user msp"
set -x
fabric-ca-client enroll -u https://${organization.user.name}:${organization.user.password}@${organization.certificateAuthority.host}:${organization.certificateAuthority.port} --caname ${organization.certificateAuthority.name} -M "${FABRIC_CA_CLIENT_HOME}/users/${organization.user.name}@${organization.name}/msp" --tls.certfiles ${PEM_FILE}
{ set +x; } 2>/dev/null

cp "${FABRIC_CA_CLIENT_HOME}/msp/config.yaml" "${FABRIC_CA_CLIENT_HOME}/users/${organization.user.name}@${organization.name}/msp/config.yaml"

echo "Generating the org admin msp"
set -x
fabric-ca-client enroll -u https://${organization.admin.name}:${organization.admin.password}@${organization.certificateAuthority.host}:${organization.certificateAuthority.port} --caname ${organization.certificateAuthority.name} -M "${FABRIC_CA_CLIENT_HOME}/users/${organization.admin.name}@${organization.name}/msp" --tls.certfiles ${PEM_FILE}
{ set +x; } 2>/dev/null

cp "${FABRIC_CA_CLIENT_HOME}/msp/config.yaml" "${FABRIC_CA_CLIENT_HOME}/users/${organization.admin.name}@${organization.name}/msp/config.yaml"
